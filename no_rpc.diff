diff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp
index 1827aec63..d7c4fa1d0 100644
--- a/src/rpc/blockchain.cpp
+++ b/src/rpc/blockchain.cpp
@@ -2297,37 +2297,37 @@ UniValue scantxoutset(const JSONRPCRequest& request)
 static const CRPCCommand commands[] =
 { //  category              name                      actor (function)         argNames
   //  --------------------- ------------------------  -----------------------  ----------
-    { "blockchain",         "getblockchaininfo",      &getblockchaininfo,      {} },
-    { "blockchain",         "getchaintxstats",        &getchaintxstats,        {"nblocks", "blockhash"} },
-    { "blockchain",         "getblockstats",          &getblockstats,          {"hash_or_height", "stats"} },
-    { "blockchain",         "getbestblockhash",       &getbestblockhash,       {} },
-    { "blockchain",         "getblockcount",          &getblockcount,          {} },
-    { "blockchain",         "getblock",               &getblock,               {"blockhash","verbosity|verbose"} },
-    { "blockchain",         "getblockhash",           &getblockhash,           {"height"} },
-    { "blockchain",         "getblockheader",         &getblockheader,         {"blockhash","verbose"} },
-    { "blockchain",         "getchaintips",           &getchaintips,           {} },
-    { "blockchain",         "getdifficulty",          &getdifficulty,          {} },
-    { "blockchain",         "getmempoolancestors",    &getmempoolancestors,    {"txid","verbose"} },
-    { "blockchain",         "getmempooldescendants",  &getmempooldescendants,  {"txid","verbose"} },
-    { "blockchain",         "getmempoolentry",        &getmempoolentry,        {"txid"} },
-    { "blockchain",         "getmempoolinfo",         &getmempoolinfo,         {} },
-    { "blockchain",         "getrawmempool",          &getrawmempool,          {"verbose"} },
-    { "blockchain",         "gettxout",               &gettxout,               {"txid","n","include_mempool"} },
-    { "blockchain",         "gettxoutsetinfo",        &gettxoutsetinfo,        {} },
-    { "blockchain",         "pruneblockchain",        &pruneblockchain,        {"height"} },
-    { "blockchain",         "savemempool",            &savemempool,            {} },
-    { "blockchain",         "verifychain",            &verifychain,            {"checklevel","nblocks"} },
-
-    { "blockchain",         "preciousblock",          &preciousblock,          {"blockhash"} },
-    { "blockchain",         "scantxoutset",           &scantxoutset,           {"action", "scanobjects"} },
-
-    /* Not shown in help */
-    { "hidden",             "invalidateblock",        &invalidateblock,        {"blockhash"} },
-    { "hidden",             "reconsiderblock",        &reconsiderblock,        {"blockhash"} },
-    { "hidden",             "waitfornewblock",        &waitfornewblock,        {"timeout"} },
-    { "hidden",             "waitforblock",           &waitforblock,           {"blockhash","timeout"} },
-    { "hidden",             "waitforblockheight",     &waitforblockheight,     {"height","timeout"} },
-    { "hidden",             "syncwithvalidationinterfacequeue", &syncwithvalidationinterfacequeue, {} },
+    { "blockchain",         "getblockchaininfo",      &getblockchaininfo,      {} }, // KEEP THIS
+    // { "blockchain",         "getchaintxstats",        &getchaintxstats,        {"nblocks", "blockhash"} },
+    // { "blockchain",         "getblockstats",          &getblockstats,          {"hash_or_height", "stats"} },
+    // { "blockchain",         "getbestblockhash",       &getbestblockhash,       {} },
+    { "blockchain",         "getblockcount",          &getblockcount,          {} }, // KEEP THIS
+    // { "blockchain",         "getblock",               &getblock,               {"blockhash","verbosity|verbose"} },
+    // { "blockchain",         "getblockhash",           &getblockhash,           {"height"} },
+    // { "blockchain",         "getblockheader",         &getblockheader,         {"blockhash","verbose"} },
+    // { "blockchain",         "getchaintips",           &getchaintips,           {} },
+    // { "blockchain",         "getdifficulty",          &getdifficulty,          {} },
+    // { "blockchain",         "getmempoolancestors",    &getmempoolancestors,    {"txid","verbose"} },
+    // { "blockchain",         "getmempooldescendants",  &getmempooldescendants,  {"txid","verbose"} },
+    // { "blockchain",         "getmempoolentry",        &getmempoolentry,        {"txid"} },
+    // { "blockchain",         "getmempoolinfo",         &getmempoolinfo,         {} },
+    // { "blockchain",         "getrawmempool",          &getrawmempool,          {"verbose"} },
+    // { "blockchain",         "gettxout",               &gettxout,               {"txid","n","include_mempool"} },
+    // { "blockchain",         "gettxoutsetinfo",        &gettxoutsetinfo,        {} },
+    // { "blockchain",         "pruneblockchain",        &pruneblockchain,        {"height"} },
+    // { "blockchain",         "savemempool",            &savemempool,            {} },
+    // { "blockchain",         "verifychain",            &verifychain,            {"checklevel","nblocks"} },
+    //
+    // { "blockchain",         "preciousblock",          &preciousblock,          {"blockhash"} },
+    // { "blockchain",         "scantxoutset",           &scantxoutset,           {"action", "scanobjects"} },
+    //
+    // /* Not shown in help */
+    // { "hidden",             "invalidateblock",        &invalidateblock,        {"blockhash"} },
+    // { "hidden",             "reconsiderblock",        &reconsiderblock,        {"blockhash"} },
+    // { "hidden",             "waitfornewblock",        &waitfornewblock,        {"timeout"} },
+    // { "hidden",             "waitforblock",           &waitforblock,           {"blockhash","timeout"} },
+    // { "hidden",             "waitforblockheight",     &waitforblockheight,     {"height","timeout"} },
+    // { "hidden",             "syncwithvalidationinterfacequeue", &syncwithvalidationinterfacequeue, {} },
 };
 // clang-format on

diff --git a/src/rpc/client.cpp b/src/rpc/client.cpp
index a266580b3..e2a60f86d 100644
--- a/src/rpc/client.cpp
+++ b/src/rpc/client.cpp
@@ -27,141 +27,141 @@ public:
  */
 static const CRPCConvertParam vRPCConvertParams[] =
 {
-    { "setmocktime", 0, "timestamp" },
-    { "generatetoaddress", 0, "nblocks" },
-    { "generatetoaddress", 2, "maxtries" },
-    { "getnetworkhashps", 0, "nblocks" },
-    { "getnetworkhashps", 1, "height" },
-    { "sendtoaddress", 1, "amount" },
-    { "sendtoaddress", 4, "subtractfeefromamount" },
-    { "sendtoaddress", 5 , "replaceable" },
-    { "sendtoaddress", 6 , "conf_target" },
-    { "settxfee", 0, "amount" },
-    { "sethdseed", 0, "newkeypool" },
-    { "getreceivedbyaddress", 1, "minconf" },
-    { "getreceivedbylabel", 1, "minconf" },
-    { "listreceivedbyaddress", 0, "minconf" },
-    { "listreceivedbyaddress", 1, "include_empty" },
-    { "listreceivedbyaddress", 2, "include_watchonly" },
-    { "listreceivedbylabel", 0, "minconf" },
-    { "listreceivedbylabel", 1, "include_empty" },
-    { "listreceivedbylabel", 2, "include_watchonly" },
-    { "getbalance", 1, "minconf" },
-    { "getbalance", 2, "include_watchonly" },
-    { "getblockhash", 0, "height" },
-    { "waitforblockheight", 0, "height" },
-    { "waitforblockheight", 1, "timeout" },
-    { "waitforblock", 1, "timeout" },
-    { "waitfornewblock", 0, "timeout" },
-    { "listtransactions", 1, "count" },
-    { "listtransactions", 2, "skip" },
-    { "listtransactions", 3, "include_watchonly" },
-    { "walletpassphrase", 1, "timeout" },
-    { "getblocktemplate", 0, "template_request" },
-    { "listsinceblock", 1, "target_confirmations" },
-    { "listsinceblock", 2, "include_watchonly" },
-    { "listsinceblock", 3, "include_removed" },
-    { "sendmany", 1, "amounts" },
-    { "sendmany", 2, "minconf" },
-    { "sendmany", 4, "subtractfeefrom" },
-    { "sendmany", 5 , "replaceable" },
-    { "sendmany", 6 , "conf_target" },
-    { "deriveaddresses", 1, "range" },
-    { "scantxoutset", 1, "scanobjects" },
-    { "addmultisigaddress", 0, "nrequired" },
-    { "addmultisigaddress", 1, "keys" },
-    { "createmultisig", 0, "nrequired" },
-    { "createmultisig", 1, "keys" },
-    { "listunspent", 0, "minconf" },
-    { "listunspent", 1, "maxconf" },
-    { "listunspent", 2, "addresses" },
-    { "listunspent", 3, "include_unsafe" },
-    { "listunspent", 4, "query_options" },
-    { "getblock", 1, "verbosity" },
-    { "getblock", 1, "verbose" },
-    { "getblockheader", 1, "verbose" },
-    { "getchaintxstats", 0, "nblocks" },
-    { "gettransaction", 1, "include_watchonly" },
-    { "getrawtransaction", 1, "verbose" },
-    { "createrawtransaction", 0, "inputs" },
-    { "createrawtransaction", 1, "outputs" },
-    { "createrawtransaction", 2, "locktime" },
-    { "createrawtransaction", 3, "replaceable" },
-    { "decoderawtransaction", 1, "iswitness" },
-    { "signrawtransactionwithkey", 1, "privkeys" },
-    { "signrawtransactionwithkey", 2, "prevtxs" },
-    { "signrawtransactionwithwallet", 1, "prevtxs" },
-    { "sendrawtransaction", 1, "allowhighfees" },
-    { "testmempoolaccept", 0, "rawtxs" },
-    { "testmempoolaccept", 1, "allowhighfees" },
-    { "combinerawtransaction", 0, "txs" },
-    { "fundrawtransaction", 1, "options" },
-    { "fundrawtransaction", 2, "iswitness" },
-    { "walletcreatefundedpsbt", 0, "inputs" },
-    { "walletcreatefundedpsbt", 1, "outputs" },
-    { "walletcreatefundedpsbt", 2, "locktime" },
-    { "walletcreatefundedpsbt", 3, "options" },
-    { "walletcreatefundedpsbt", 4, "bip32derivs" },
-    { "walletprocesspsbt", 1, "sign" },
-    { "walletprocesspsbt", 3, "bip32derivs" },
-    { "createpsbt", 0, "inputs" },
-    { "createpsbt", 1, "outputs" },
-    { "createpsbt", 2, "locktime" },
-    { "createpsbt", 3, "replaceable" },
-    { "combinepsbt", 0, "txs"},
-    { "joinpsbts", 0, "txs"},
-    { "finalizepsbt", 1, "extract"},
-    { "converttopsbt", 1, "permitsigdata"},
-    { "converttopsbt", 2, "iswitness"},
-    { "gettxout", 1, "n" },
-    { "gettxout", 2, "include_mempool" },
-    { "gettxoutproof", 0, "txids" },
-    { "lockunspent", 0, "unlock" },
-    { "lockunspent", 1, "transactions" },
-    { "importprivkey", 2, "rescan" },
-    { "importaddress", 2, "rescan" },
-    { "importaddress", 3, "p2sh" },
-    { "importpubkey", 2, "rescan" },
-    { "importmulti", 0, "requests" },
-    { "importmulti", 1, "options" },
-    { "verifychain", 0, "checklevel" },
-    { "verifychain", 1, "nblocks" },
-    { "getblockstats", 0, "hash_or_height" },
-    { "getblockstats", 1, "stats" },
-    { "pruneblockchain", 0, "height" },
-    { "keypoolrefill", 0, "newsize" },
-    { "getrawmempool", 0, "verbose" },
-    { "estimatesmartfee", 0, "conf_target" },
-    { "estimaterawfee", 0, "conf_target" },
-    { "estimaterawfee", 1, "threshold" },
-    { "prioritisetransaction", 1, "dummy" },
-    { "prioritisetransaction", 2, "fee_delta" },
-    { "setban", 2, "bantime" },
-    { "setban", 3, "absolute" },
-    { "setnetworkactive", 0, "state" },
-    { "getmempoolancestors", 1, "verbose" },
-    { "getmempooldescendants", 1, "verbose" },
-    { "bumpfee", 1, "options" },
-    { "logging", 0, "include" },
-    { "logging", 1, "exclude" },
-    { "disconnectnode", 1, "nodeid" },
-    // Echo with conversion (For testing only)
-    { "echojson", 0, "arg0" },
-    { "echojson", 1, "arg1" },
-    { "echojson", 2, "arg2" },
-    { "echojson", 3, "arg3" },
-    { "echojson", 4, "arg4" },
-    { "echojson", 5, "arg5" },
-    { "echojson", 6, "arg6" },
-    { "echojson", 7, "arg7" },
-    { "echojson", 8, "arg8" },
-    { "echojson", 9, "arg9" },
-    { "rescanblockchain", 0, "start_height"},
-    { "rescanblockchain", 1, "stop_height"},
-    { "createwallet", 1, "disable_private_keys"},
-    { "createwallet", 2, "blank"},
-    { "getnodeaddresses", 0, "count"},
-    { "stop", 0, "wait" },
+    // { "setmocktime", 0, "timestamp" },
+    // { "generatetoaddress", 0, "nblocks" },
+    // { "generatetoaddress", 2, "maxtries" },
+    // { "getnetworkhashps", 0, "nblocks" },
+    // { "getnetworkhashps", 1, "height" },
+    // { "sendtoaddress", 1, "amount" },
+    // { "sendtoaddress", 4, "subtractfeefromamount" },
+    // { "sendtoaddress", 5 , "replaceable" },
+    // { "sendtoaddress", 6 , "conf_target" },
+    // { "settxfee", 0, "amount" },
+    // { "sethdseed", 0, "newkeypool" },
+    // { "getreceivedbyaddress", 1, "minconf" },
+    // { "getreceivedbylabel", 1, "minconf" },
+    // { "listreceivedbyaddress", 0, "minconf" },
+    // { "listreceivedbyaddress", 1, "include_empty" },
+    // { "listreceivedbyaddress", 2, "include_watchonly" },
+    // { "listreceivedbylabel", 0, "minconf" },
+    // { "listreceivedbylabel", 1, "include_empty" },
+    // { "listreceivedbylabel", 2, "include_watchonly" },
+    // { "getbalance", 1, "minconf" },
+    // { "getbalance", 2, "include_watchonly" },
+    // { "getblockhash", 0, "height" },
+    // { "waitforblockheight", 0, "height" },
+    // { "waitforblockheight", 1, "timeout" },
+    // { "waitforblock", 1, "timeout" },
+    // { "waitfornewblock", 0, "timeout" },
+    // { "listtransactions", 1, "count" },
+    // { "listtransactions", 2, "skip" },
+    // { "listtransactions", 3, "include_watchonly" },
+    // { "walletpassphrase", 1, "timeout" },
+    // { "getblocktemplate", 0, "template_request" },
+    // { "listsinceblock", 1, "target_confirmations" },
+    // { "listsinceblock", 2, "include_watchonly" },
+    // { "listsinceblock", 3, "include_removed" },
+    // { "sendmany", 1, "amounts" },
+    // { "sendmany", 2, "minconf" },
+    // { "sendmany", 4, "subtractfeefrom" },
+    // { "sendmany", 5 , "replaceable" },
+    // { "sendmany", 6 , "conf_target" },
+    // { "deriveaddresses", 1, "range" },
+    // { "scantxoutset", 1, "scanobjects" },
+    // { "addmultisigaddress", 0, "nrequired" },
+    // { "addmultisigaddress", 1, "keys" },
+    // { "createmultisig", 0, "nrequired" },
+    // { "createmultisig", 1, "keys" },
+    // { "listunspent", 0, "minconf" },
+    // { "listunspent", 1, "maxconf" },
+    // { "listunspent", 2, "addresses" },
+    // { "listunspent", 3, "include_unsafe" },
+    // { "listunspent", 4, "query_options" },
+    // { "getblock", 1, "verbosity" },
+    // { "getblock", 1, "verbose" },
+    // { "getblockheader", 1, "verbose" },
+    // { "getchaintxstats", 0, "nblocks" },
+    // { "gettransaction", 1, "include_watchonly" },
+    { "getrawtransaction", 1, "verbose" }, // KEEP THIS
+    // { "createrawtransaction", 0, "inputs" },
+    // { "createrawtransaction", 1, "outputs" },
+    // { "createrawtransaction", 2, "locktime" },
+    // { "createrawtransaction", 3, "replaceable" },
+    // { "decoderawtransaction", 1, "iswitness" },
+    // { "signrawtransactionwithkey", 1, "privkeys" },
+    // { "signrawtransactionwithkey", 2, "prevtxs" },
+    // { "signrawtransactionwithwallet", 1, "prevtxs" },
+    { "sendrawtransaction", 1, "allowhighfees" }, // KEEP THIS
+    // { "testmempoolaccept", 0, "rawtxs" },
+    // { "testmempoolaccept", 1, "allowhighfees" },
+    // { "combinerawtransaction", 0, "txs" },
+    // { "fundrawtransaction", 1, "options" },
+    // { "fundrawtransaction", 2, "iswitness" },
+    // { "walletcreatefundedpsbt", 0, "inputs" },
+    // { "walletcreatefundedpsbt", 1, "outputs" },
+    // { "walletcreatefundedpsbt", 2, "locktime" },
+    // { "walletcreatefundedpsbt", 3, "options" },
+    // { "walletcreatefundedpsbt", 4, "bip32derivs" },
+    // { "walletprocesspsbt", 1, "sign" },
+    // { "walletprocesspsbt", 3, "bip32derivs" },
+    // { "createpsbt", 0, "inputs" },
+    // { "createpsbt", 1, "outputs" },
+    // { "createpsbt", 2, "locktime" },
+    // { "createpsbt", 3, "replaceable" },
+    // { "combinepsbt", 0, "txs"},
+    // { "joinpsbts", 0, "txs"},
+    // { "finalizepsbt", 1, "extract"},
+    // { "converttopsbt", 1, "permitsigdata"},
+    // { "converttopsbt", 2, "iswitness"},
+    // { "gettxout", 1, "n" },
+    // { "gettxout", 2, "include_mempool" },
+    // { "gettxoutproof", 0, "txids" },
+    // { "lockunspent", 0, "unlock" },
+    // { "lockunspent", 1, "transactions" },
+    // { "importprivkey", 2, "rescan" },
+    // { "importaddress", 2, "rescan" },
+    // { "importaddress", 3, "p2sh" },
+    // { "importpubkey", 2, "rescan" },
+    // { "importmulti", 0, "requests" },
+    // { "importmulti", 1, "options" },
+    // { "verifychain", 0, "checklevel" },
+    // { "verifychain", 1, "nblocks" },
+    // { "getblockstats", 0, "hash_or_height" },
+    // { "getblockstats", 1, "stats" },
+    // { "pruneblockchain", 0, "height" },
+    // { "keypoolrefill", 0, "newsize" },
+    // { "getrawmempool", 0, "verbose" },
+    // { "estimatesmartfee", 0, "conf_target" },
+    // { "estimaterawfee", 0, "conf_target" },
+    // { "estimaterawfee", 1, "threshold" },
+    // { "prioritisetransaction", 1, "dummy" },
+    // { "prioritisetransaction", 2, "fee_delta" },
+    // { "setban", 2, "bantime" },
+    // { "setban", 3, "absolute" },
+    // { "setnetworkactive", 0, "state" },
+    // { "getmempoolancestors", 1, "verbose" },
+    // { "getmempooldescendants", 1, "verbose" },
+    // { "bumpfee", 1, "options" },
+    // { "logging", 0, "include" },
+    // { "logging", 1, "exclude" },
+    // { "disconnectnode", 1, "nodeid" },
+    // // Echo with conversion (For testing only)
+    // { "echojson", 0, "arg0" },
+    // { "echojson", 1, "arg1" },
+    // { "echojson", 2, "arg2" },
+    // { "echojson", 3, "arg3" },
+    // { "echojson", 4, "arg4" },
+    // { "echojson", 5, "arg5" },
+    // { "echojson", 6, "arg6" },
+    // { "echojson", 7, "arg7" },
+    // { "echojson", 8, "arg8" },
+    // { "echojson", 9, "arg9" },
+    // { "rescanblockchain", 0, "start_height"},
+    // { "rescanblockchain", 1, "stop_height"},
+    // { "createwallet", 1, "disable_private_keys"},
+    // { "createwallet", 2, "blank"},
+    // { "getnodeaddresses", 0, "count"},
+    // { "stop", 0, "wait" },
 };
 // clang-format on

diff --git a/src/rpc/net.cpp b/src/rpc/net.cpp
index c7b3478f4..93fc47645 100644
--- a/src/rpc/net.cpp
+++ b/src/rpc/net.cpp
@@ -742,19 +742,19 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)
 static const CRPCCommand commands[] =
 { //  category              name                      actor (function)         argNames
   //  --------------------- ------------------------  -----------------------  ----------
-    { "network",            "getconnectioncount",     &getconnectioncount,     {} },
-    { "network",            "ping",                   &ping,                   {} },
-    { "network",            "getpeerinfo",            &getpeerinfo,            {} },
-    { "network",            "addnode",                &addnode,                {"node","command"} },
-    { "network",            "disconnectnode",         &disconnectnode,         {"address", "nodeid"} },
-    { "network",            "getaddednodeinfo",       &getaddednodeinfo,       {"node"} },
-    { "network",            "getnettotals",           &getnettotals,           {} },
-    { "network",            "getnetworkinfo",         &getnetworkinfo,         {} },
-    { "network",            "setban",                 &setban,                 {"subnet", "command", "bantime", "absolute"} },
-    { "network",            "listbanned",             &listbanned,             {} },
-    { "network",            "clearbanned",            &clearbanned,            {} },
-    { "network",            "setnetworkactive",       &setnetworkactive,       {"state"} },
-    { "network",            "getnodeaddresses",       &getnodeaddresses,       {"count"} },
+    // { "network",            "getconnectioncount",     &getconnectioncount,     {} },
+    { "network",            "ping",                   &ping,                   {} }, // KEEP THIS
+    // { "network",            "getpeerinfo",            &getpeerinfo,            {} },
+    // { "network",            "addnode",                &addnode,                {"node","command"} },
+    // { "network",            "disconnectnode",         &disconnectnode,         {"address", "nodeid"} },
+    // { "network",            "getaddednodeinfo",       &getaddednodeinfo,       {"node"} },
+    // { "network",            "getnettotals",           &getnettotals,           {} },
+    { "network",            "getnetworkinfo",         &getnetworkinfo,         {} }, // KEEP THIS
+    // { "network",            "setban",                 &setban,                 {"subnet", "command", "bantime", "absolute"} },
+    // { "network",            "listbanned",             &listbanned,             {} },
+    // { "network",            "clearbanned",            &clearbanned,            {} },
+    // { "network",            "setnetworkactive",       &setnetworkactive,       {"state"} },
+    // { "network",            "getnodeaddresses",       &getnodeaddresses,       {"count"} },
 };
 // clang-format on

diff --git a/src/rpc/rawtransaction.cpp b/src/rpc/rawtransaction.cpp
index d19afaa8a..45cdc1118 100644
--- a/src/rpc/rawtransaction.cpp
+++ b/src/rpc/rawtransaction.cpp
@@ -2045,25 +2045,25 @@ static const CRPCCommand commands[] =
 { //  category              name                            actor (function)            argNames
   //  --------------------- ------------------------        -----------------------     ----------
     { "rawtransactions",    "getrawtransaction",            &getrawtransaction,         {"txid","verbose","blockhash"} },
-    { "rawtransactions",    "createrawtransaction",         &createrawtransaction,      {"inputs","outputs","locktime","replaceable"} },
-    { "rawtransactions",    "decoderawtransaction",         &decoderawtransaction,      {"hexstring","iswitness"} },
-    { "rawtransactions",    "decodescript",                 &decodescript,              {"hexstring"} },
+    // { "rawtransactions",    "createrawtransaction",         &createrawtransaction,      {"inputs","outputs","locktime","replaceable"} },
+    // { "rawtransactions",    "decoderawtransaction",         &decoderawtransaction,      {"hexstring","iswitness"} },
+    // { "rawtransactions",    "decodescript",                 &decodescript,              {"hexstring"} },
     { "rawtransactions",    "sendrawtransaction",           &sendrawtransaction,        {"hexstring","allowhighfees"} },
-    { "rawtransactions",    "combinerawtransaction",        &combinerawtransaction,     {"txs"} },
-    { "hidden",             "signrawtransaction",           &signrawtransaction,        {"hexstring","prevtxs","privkeys","sighashtype"} },
-    { "rawtransactions",    "signrawtransactionwithkey",    &signrawtransactionwithkey, {"hexstring","privkeys","prevtxs","sighashtype"} },
-    { "rawtransactions",    "testmempoolaccept",            &testmempoolaccept,         {"rawtxs","allowhighfees"} },
-    { "rawtransactions",    "decodepsbt",                   &decodepsbt,                {"psbt"} },
-    { "rawtransactions",    "combinepsbt",                  &combinepsbt,               {"txs"} },
-    { "rawtransactions",    "finalizepsbt",                 &finalizepsbt,              {"psbt", "extract"} },
-    { "rawtransactions",    "createpsbt",                   &createpsbt,                {"inputs","outputs","locktime","replaceable"} },
-    { "rawtransactions",    "converttopsbt",                &converttopsbt,             {"hexstring","permitsigdata","iswitness"} },
-    { "rawtransactions",    "utxoupdatepsbt",               &utxoupdatepsbt,            {"psbt"} },
-    { "rawtransactions",    "joinpsbts",                    &joinpsbts,                 {"txs"} },
-    { "rawtransactions",    "analyzepsbt",                  &analyzepsbt,               {"psbt"} },
-
-    { "blockchain",         "gettxoutproof",                &gettxoutproof,             {"txids", "blockhash"} },
-    { "blockchain",         "verifytxoutproof",             &verifytxoutproof,          {"proof"} },
+    // { "rawtransactions",    "combinerawtransaction",        &combinerawtransaction,     {"txs"} },
+    // { "hidden",             "signrawtransaction",           &signrawtransaction,        {"hexstring","prevtxs","privkeys","sighashtype"} },
+    // { "rawtransactions",    "signrawtransactionwithkey",    &signrawtransactionwithkey, {"hexstring","privkeys","prevtxs","sighashtype"} },
+    // { "rawtransactions",    "testmempoolaccept",            &testmempoolaccept,         {"rawtxs","allowhighfees"} },
+    // { "rawtransactions",    "decodepsbt",                   &decodepsbt,                {"psbt"} },
+    // { "rawtransactions",    "combinepsbt",                  &combinepsbt,               {"txs"} },
+    // { "rawtransactions",    "finalizepsbt",                 &finalizepsbt,              {"psbt", "extract"} },
+    // { "rawtransactions",    "createpsbt",                   &createpsbt,                {"inputs","outputs","locktime","replaceable"} },
+    // { "rawtransactions",    "converttopsbt",                &converttopsbt,             {"hexstring","permitsigdata","iswitness"} },
+    // { "rawtransactions",    "utxoupdatepsbt",               &utxoupdatepsbt,            {"psbt"} },
+    // { "rawtransactions",    "joinpsbts",                    &joinpsbts,                 {"txs"} },
+    // { "rawtransactions",    "analyzepsbt",                  &analyzepsbt,               {"psbt"} },
+
+    // { "blockchain",         "gettxoutproof",                &gettxoutproof,             {"txids", "blockhash"} },
+    // { "blockchain",         "verifytxoutproof",             &verifytxoutproof,          {"proof"} },
 };
 // clang-format on
